=========================================================================================================================================================================


F	index
N	Main Page

P	Welcome! This is work in progress!
P	TBD:
P	Configuration Files
P	
P	    config.json
P	    runtime.json
P	    config/hud_layer_order.json
P	    config/loadlist.json
P	    config/music.json
P	
P	Asset Files
P	
P	    Fonts
P	    Levels
P	    Maps
P	    Particles
P	    Sound Events
P	    Sprites
P	    UI Widgets
P	    UI Widget Script

E


=========================================================================================================================================================================


F	overview
N	Overview

P	This page explains various value types and symbols assigned to it.
D	- (number) - A number value.
D	- (string) - A string value.
D	- (boolean) - A boolean value (true or false).
D	- (list) - A list.
D	- (object) - A JSON object.
D	- (Vec2) - A 2D vector. It is a table which contains the following values:
D		- x (number) - The length of the vector along X axis.
D		- y (number) - The length of the vector along Y axis.
D	- (Color) - A color. It is a table which contains the following values:
D		- r (number) - The red component, of a value ranging from 0 to 1.
D		- g (number) - The green component, of a value ranging from 0 to 1.
D		- b (number) - The blue component, of a value ranging from 0 to 1.
D	- (Expression) - An expression. There will be a separate page dedicated for it.
D	- (CollectibleGenerator*) - A pointer which points to a Collectible Generator, in format: "X.json".
D	- (ColorPalette*) - A pointer which points to a Color Palette, i.e. "images/powerups/wild_pal.png".
D	- (Font*) - A pointer which points to a Font, in format: "fonts/X.json".
D	- (Particle*) - A pointer which points to a particle packet, in format: "particles/X.json".
D	- (SoundEvent*) - A pointer which points to a Sound Event, in format: "sound_events/X.json".
D	- (Sprite*) - A pointer which points to a Sprite, in format: "sprites/X.json".

E


=========================================================================================================================================================================


F	config.highscores
N	config/highscores.json

P	Contains default scoreboard settings. These are used when launching the game for the first time or when resetting the highscores manually.
DI	../../schemas/config/highscores.json

E


=========================================================================================================================================================================


F	config.gameplay
N	config/gameplay.json

P	Defines behavior of various game elements.
DI	../../schemas/config/gameplay.json

E


=========================================================================================================================================================================


F	config.collectibles
N	config/collectibles/*.json

P	Defines all collectibles in the game.
P	Each collectibles is stored in a separate file, located in <i>config/collectibles/*.json</i>. The name of the file is the same as ID of that collectible.
P	To add a new collectible, simply create a new file in the aforementioned folder.
P	<i>Note:</i> Collectibles are not rendered as sprites, but rather as particles. The particle packet used to render a collectible needs to be persistent.
DI	../../schemas/config/collectible.json

H2	Possible powerup effects | collectible_effect
P	<i>Debug information: this can be checked in Level:applyEffect().</i>
DIE	../../schemas/config/collectible_effect.json

E


=========================================================================================================================================================================


F	config.collectible_generators
N	config/collectible_generators/*.json

P	Defines all Collectible Generators in the game.
P	Each collectible generator is stored in a separate file, located in <i>config/collectible_generators/*.json</i>. The name of the file is the same as ID of that generator.
P	To add a new collectible generator, simply create a new file in the aforementioned folder.
P	A single collectible generator is a single entry. Various entry types allow chaining or picking from multiple different entries.
P	All entries evaluate to a list of collectibles, and the collectible generator result is evaluated from the root entry.

H2	Allowed collectible generator entry types
P	<i>Debug information: this can be checked in CollectibleGeneratorEntry:evaluate().</i>

H3	<i>collectible</i>
P	Evaluates to a single collectible.
D	- (object) - A single entry.
D		- type (string) - <b><i>collectible</i></b>
D		- name (string) - A collectible ID to be evaluated to.
D		- conditions* (list) - A list of conditions. All of them must be satisfied. In other case, this entry will not generate any collectibles and return an empty list. More info below.

H3	<i>collectibleGenerator</i>
P	Evaluates to another collectible generator result.
D	- (object) - A single entry.
D		- type (string) - <b><i>collectibleGenerator</i></b>
D		- name (string) - A collectible generator ID to be evaluated.
D		- conditions* (list) - A list of conditions. All of them must be satisfied. In other case, this entry will not generate any collectibles and return an empty list. More info below.

H3	<i>combine</i>
P	Evaluates a list of given entries and returns a list of all collectibles generated.
D	- (object) - A single entry.
D		- type (string) - <b><i>combine</i></b>
D		- entries (list) - A list of collectible entries to be evaluated.
D		- conditions* (list) - A list of conditions. All of them must be satisfied. In other case, this entry will not generate any collectibles and return an empty list. More info below.

H3	<i>repeat</i>
P	Evaluates a given entry a number of times and returns a list of all collectibles generated.
D	- (object) - A single entry.
D		- type (string) - <b><i>repeat</i></b>
D		- entry (object) - A collectible entry to be evaluated.
D		- count (Expression|number) - How many times the entry should be evaluated.
D		- conditions* (list) - A list of conditions. All of them must be satisfied. In other case, this entry will not generate any collectibles and return an empty list. More info below.

H3	<i>randomPick</i>
P	Evaluates all the choices, discards empty ones, and selects one of the remaining results at random.
D	- (object) - A single entry.
D		- type (string) - <b><i>randomPick</i></b>
D		- pool (list) - A list of choices to be picked from.
D			- (object) - A single choice.
D				- entry (object) - A collectible entry to be evaluated.
D				- weight* (number) - The bigger this number is, the more likely this option is to be chosen. Defaults to 1.
D		- conditions* (list) - A list of conditions. All of them must be satisfied. In other case, this entry will not generate any collectibles and return an empty list. More info below.

H2	Allowed collectible generator conditions
P	<i>Debug information: this can be checked in CollectibleGeneratorEntry:checkCondition().</i>

H3	<i>expression</i>
P	Returns true if the provided expression returns true.
D	- (object) - A single condition.
D		- type (string) - <b><i>expression</i></b>
D		- expression (Expression|boolean) - An expression to be evaluated.

H3	<i>colorPresent</i>
P	Returns true if a given color is present on the board.
D	- (object) - A single condition.
D		- type (string) - <b><i>colorPresent</i></b>
D		- color (number) - A color to be checked.

H3	<i>cmpLatestCheckpoint</i>
P	Returns true if the profile latest checkpoint value is within defined bounds.
D	- (object) - A single condition.
D		- type (string) - <b><i>cmpLatestCheckpoint</i></b>
D		- min* (number) - If the checked value is lower than this value, this check will fail.
D		- max* (number) - If the checked value is greater than this value, this check will fail.
D		- value* (number) - If the checked value is not equal to this value, this check will fail.

E


=========================================================================================================================================================================


F	config.sphere_effects
N	config/sphere_effects/*.json

P	Defines all Sphere Effects in the game.
P	A sphere effect can be applied to any sphere. After a certain time, spheres "infected" with a given effect will be destroyed.
P	A sphere can also infect neighbors, if it has been configured to do so. Until the infection size gets to 0, the infection time is counted each time. When it gets to 0, the main destruction timer starts.
P	When the sphere effect timer gets to 0, all spheres which have that same effect and were caused by the same sphere will be destroyed.
DI	../../schemas/config/sphere_effect.json

E


=========================================================================================================================================================================


F	config.spheres
N	config/spheres/sphere_*.json

P	Defines all sphere types in the game.
P	Each sphere is stored in a separate file, located in <i>config/spheres/sphere_*.json</i>, where the asterisk is your sphere ID.
P	To add a new sphere, simply create a new file in the aforementioned folder, making sure that you name it correctly and the ID is unique.
PS	A sphere ID must be an integer number. The numbers do not have to be continuous. Make sure you follow the following guidelines:
R	<ol>
R	<li>ID = 0 is reserved by the sphere pusher (e.g. a scarab).</li>
R	<li>Negative IDs should be used for powerup balls (i.e. a fireball, dagger, color cloud, etc.).</li>
R	<li>Positive IDs should be used for ordinary balls which spawn in the game.</li>
PE	</ol>
DI	../../schemas/config/sphere.json

H2	Possible shoot behaviors | sphere_shoot_behavior
P	<i>Debug information: this can be checked in Shooter:shoot().</i>
DIE	../../schemas/config/sphere_shoot_behavior.json

H2	Possible hit behaviors | sphere_hit_behavior
P	<i>Debug information: this can be checked in ShotSphere:moveStep().</i>
DIE	../../schemas/config/sphere_hit_behavior.json

E


=========================================================================================================================================================================


F	config.level_set
N	config/level_set.json

P	Contains information about level order and checkpoints.
P	A checkpoint is a place, where the player can start a new game.
D	- (object) - The root entry.
D		- levelOrder (list) - A list which contains level entries. Levels will be played in this order. More info below.
D		- checkpoints (list) - A list of integers, containing index numbers corresponding to level IDs in the <i>levelOrder</i> field.
D		- startCheckpoints (list) - A list of checkpoint IDs, which are unlocked upon profile creation.

H2	Possible level order entry types
P	<i>Debug information: this can be checked in Profile:getLevelName(), Profile:incrementLevel(), Profile:generateLevelID() and a number of other functions in Profile class.</i>

H3	<i>level</i>
P	A single level to be played.
D	- (object) - A single level entry.
D		- type (string) - <b><i>level</i></b>
D		- level (number) - A level ID to be loaded and played.
D		- name (string) - A level name.
D		- unlockCheckpointsOnBeat* (list) - If specified, after beating this entry, checkpoints with IDs corresponding to numbers in this list will be unlocked.

H3	<i>randomizer</i>
P	A group of levels to be played in random order.
D	- (object) - A single level entry.
D		- type (string) - <b><i>randomizer</i></b>
D		- pool (list) - A list of level IDs to be chosen from.
D		- names (list) - A list of level names. It is not shuffled, and this list should have the same lenth as <i>count</i>.
D		- count (number) - How many levels are to be picked from the pool.
D		- mode (string) - How the levels will be randomized. There are three possible values:
D		R <ol>
D		R <li><b>repeat</b> - Every next level is simply drawn at random from the list.</li>
D		R <li><b>noRepeat</b> - Same as above, but an entry is removed from the pool once it's been picked.</li>
D		R <li><b>order</b> - Chooses <i>count</i> entries from the pool, without changing their order.</li>
D		R <li>Both <b>noRepeat</b> and <b>order</b> modes need the pool size to be greater or equal to the <i>count</i>.</li>
D		R </ol>
D		- unlockCheckpointsOnBeat* (list) - If specified, after beating this entry, checkpoints with IDs corresponding to numbers in this list will be unlocked.

E


=========================================================================================================================================================================


F	config.levels
N	config/levels/level_*.json

P	Level files contain information about sphere speeds, colors, etc.
P	Useful vocabulary: We say the player is in <i>danger</i> when the spheres are close to the end point of the path and the pyramid starts blinking.
D	- (object) - The root entry.
D		- map (string) - The map name. Specifically, the name of the folder in the "maps" folder of the game.
D		- music (Music*) - Which soundtrack should be played throughout the level.
D		- dangerMusic* (Music*) - Which soundtrack should be played during the danger phase.
D		- ambientMusic* (Music*) - Which soundtrack should be played throughout the entire level, including before starting and after winning, independently of the level and danger soundtracks.
D		- powerupGenerator (CollectibleGenerator*) - I'm not sure if this is used anymore.
D		- gemGenerator (CollectibleGenerator*) - The collectible generator used to generate loot from successfully broken scarabs.
D		- colorGeneratorNormal (ColorGenerator*) - The Color Generator used to generate colors for the shooter throughout this level.
D		- colorGeneratorDanger (ColorGenerator*) - The Color Generator used to generate colors for the shooter when in danger.
D		- shooter* (object) - Defines the Shooter. If not present, the shooter named <i>default</i> will be used along with its default movement.
D			- name (Shooter*) - Which Shooter will be used for this level.
D			- movement* (object) - If defined, overrides the default movement of this Shooter. See below.
D		- matchEffect (MatchEffect*) - The Match Effect to be used for this level, during normal matches.
D		- target (number) - How many Spheres need to be destroyed to fill the Level's objective. Deprecated.
D		- pathsBehavior (list) - Defines the behavior of paths. The n-th entry of this list corresponds to the n-th path. If this list is shorter than the number of paths, this list will wrap around during the behavior assignment process. If this list is longer than the number of paths, all subsequent entries are discarded.
D			- (object) - A single path behavior.
D				- colors (list) - A list of integers. These are the colors that will be assigned to the newly created Spheres on the path.
D				- colorStreak (number) - The probability of the next color being the same as the previous one in sequence.
D				- spawnRules (object) - How the sphere chains should be spawned. Check the possible types below.
D				- spawnDistance (number) - How far the path must be clear for a new Sphere Chain to spawn.
D				- dangerDistance (number) - How far into the path the spheres have to be in order for the player to be in danger.
D				- speeds (list) - A list of speeds which will translate to the actual speed on any point of the path.
D					- (object) - A single speed graph node.
D						- distance (number) - How far into the path the given speed should be applied.
D						- speed (number) - The desired speed of the sphere trains, in pixels per second.
D						- transition* (object) - Defines the transition between this and the <i>next</i> node on the speed graph. By default, linear transition is applied.
D							- type (string) - I don't know if this works.

H2	Possible shooter movement types (move this to Shooter later on)
P	<i>Debug information: this can be checked in Shooter:update(), Shooter:getInitialPos() and Shooter:getInitialAngle().</i>

H3	<i>linear</i>
P	The Shooter will be moving along a horizontal line.
D	- (object) - The shooter movement.
D		- type (string) - <b><i>linear</i></b>
D		- xMin (number) - The minimum X position this Shooter can be at.
D		- xMax (number) - The maximum X position this Shooter can be at.
D		- y (number) - The Y position this Shooter will be at.
D		- angle (number) - The shooting (and the entire shooter) angle in degrees. 0 is up.

H3	<i>circular</i>
P	The Shooter will be locked in place, but being able to rotate around.
D	- (object) - The shooter movement.
D		- type (string) - <b><i>circular</i></b>
D		- x (number) - The X position of the Shooter.
D		- y (number) - The Y position of the Shooter.

H2	Possible spawn rule types
P	<i>Debug information: this can be checked in SphereChain:new().</i>

H3	<i>waves</i>
P	The Sphere Chains will be prebuilt with the given number of spheres. The scarab is not counted.
D	- (object) - The spawn rules.
D		- type (string) - <b><i>waves</i></b>
D		- amount (number) - How many spheres should be generated in each wave.

H3	<i>continuous</i>
P	The Sphere Chains will not end, and new spheres will be generated dynamically. The generation will end when either the level target is fulfilled, or the level is lost.
D	- (object) - The spawn rules.
D		- type (string) - <b><i>continuous</i></b>

E


=========================================================================================================================================================================
